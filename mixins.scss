
/**
Alle Variablen, die gebraucht werden, um die Mixins zu betreiben. 
**/

$mixins_default_breakpoint_desktop: 992;
$mixins_default_font_size: 16;


/**
Setzte Styling für alle Überschriften Tags.
**/ 

@mixin headlines()
{
    h1,h2,h3,h4,h5,h6 
    {
        @content;
    }
}


/**
Berechnet die Schriftgröße von px zu rem.

WICHTIG:
Bei Aufruf keine Angabe in px, sonst kann rem nicht berechnet werden.
**/

@mixin font-size($size, $important: false)
{
    $value: $size / $mixins_default_font_size;

    @if $important == true
    {
        font-size: #{$value}rem;
    }
    @else
    {
        font-size: #{$value}rem !important;
    }

}


/**
Setze Styling für alle Bildschirmbreiten kleiner als $bp.
**/

@mixin mobile($bp: #{$mixins_default_breakpoint_desktop - 1}px)
{
    @media screen and (max-width: #{$bp})
    {
        @content;
    }
}


/**
Setze Styling für alle Bildschirmbreiten größer als $bp.
**/

@mixin desktop($bp: #{$mixins_default_breakpoint_desktop}px)
{
    @media screen and (min-width: #{$bp})
    {
        @content;
    }
}


/**
Erstelle einen Container im Format 16:9.
Nützlich für Videos oder Bilder.

Beispiel HTML-Struktur
   
    <div class="nv-container">
        <iframe></iframe>
    </div>
**/

@mixin video-ratio($container: '.nv-container', $element: 'iframe')
{
    #{$container}
    {
        padding-top: calc(100% * (9 / 16));
        position: relative;

        #{$element} 
        {
            position: absolute;
            width: 100%;
            height: 100%;
            left: 0;
            top: 0;
        }
    }
}


/**
Berechnet die Breite eines Elements anhand der Anzahl seiner Geschwister.

Beispiel HTML-Struktur:

    <div>
        <span>Test</span>
        <span>Test</span>
    </div>

Das Element "span" ist also 50% breit.
**/

@mixin width-based-on-quantity($element, $maxItems: 5, $gap: 0)
{
    #{$element}:first-child:nth-last-child(1) 
    {
        width: 100%;
        @content;
    }

    @for $i from 2 through $maxItems 
    {
        #{$element}:first-child:nth-last-child(#{$i}),
        #{$element}:first-child:nth-last-child(#{$i}) ~ #{$element} 
        {
            width: calc(100% / #{$i} - #{$gap}px);
            @content;
        }
    }
}